import numpy as np
import cv2

img = cv2.imread("a.jpeg")
sigma = 0.7
t1 = 0.05
t2 = 0.15


# It generates a Gaussian kernel which is to be convoluted with the grayscale image to reduce noise
# It returns the Gaussian kernel
def generate_gaussian_kernel(size, sigma):
    ### START ###
    # Calculate the kernel range based on the provided size
    x = np.arange(-size // 2 + 1, size // 2 + 1)

    # Calculate the 1D Gaussian kernel
    gaussian_kernel_1d = np.exp(-x ** 2 / (2 * sigma ** 2))
    gaussian_kernel_1d /= np.sum(gaussian_kernel_1d)

    # Calculate the 2D Gaussian kernel by taking the outer product of the 1D kernel with its transpose
    gaussian_kernel = np.outer(gaussian_kernel_1d, gaussian_kernel_1d.T)
    ### END ###

    return gaussian_kernel


def apply_convolution(img, kernel):
    ### START ###
    M, N = img.shape
    m, n = kernel.shape

    # Pad the image so that the output has the same dimensions as the input
    padded_img = np.pad(img, ((m // 2, m // 2), (n // 2, n // 2)), mode='edge')
    output = np.zeros((M, N))

    # Perform convolution
    for i in range(M):
        for j in range(N):
            output[i, j] = np.sum(padded_img[i:i + m, j:j + n] * kernel)
    ### END ###

    return output


def non_maximum_suppression(G, theta):
    ### START ###
    N, M = G.shape
    G_suppressed = G.copy()

    for i_y in range(N):
        for i_x in range(M):
            # Remaining code here...
    ### END ###

    return G_suppressed


def sobel_op(img):
    ### START ###
    dx_kernel = np.array([[-1, 0, 1],
                          [-2, 0, 2],
                          [-1, 0, 1]], dtype=np.float32)

    dy_kernel = np.array([[-1, -2, -1],
                          [0, 0, 0],
                          [1, 2, 1]], dtype=np.float32)

    dx = apply_convolution(img, dx_kernel)
    dy = apply_convolution(img, dy_kernel)
    ### END ###

    return dx, dy


def hysteresis_thresholding(img, t1, t2):
    ### START ###
    weak = np.zeros_like(img)
    strong = np.zeros_like(img)
    strong_threshold = np.max(img) * t2
    weak_threshold = np.max(img) * t1

    strong[img >= strong_threshold] = 255
    weak[(img >= weak_threshold) & (img < strong_threshold)] = 128

    edge_map = np.uint8(strong)

    for i in range(1, img.shape[0] - 1):
        for j in range(1, img.shape[1] - 1):
            if weak[i, j] == 128:
                if (strong[i - 1:i + 2, j - 1:j + 2] == 255).any():
                    edge_map[i, j] = 255
                else:
                    edge_map[i, j] = 0
    ### END ###

    return edge_map


def Canny_detector(img, sigma, t1, t2):
    ### START ###
    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    kernel_size = int(2 * round(3 * sigma) + 1)
    gaussian_kernel = generate_gaussian_kernel(kernel_size, sigma)
    img_smooth = apply_convolution(img_gray, gaussian_kernel)

    gx, gy = sobel_op(img_smooth)
    G_mag, G_dir = cv2.cartToPolar(gx, gy, angleInDegrees=True)

    G_suppressed = non_maximum_suppression(G_mag, G_dir)

    edge_image = hysteresis_thresholding(G_suppressed, t1, t2)
    ### END ###

    return img_gray, img_smooth, edge_image


img_gray, img_smooth, img_op = Canny_detector(img, sigma, t1, t2)
cv2.imwrite(f"img_gray.jpeg", img_gray)
cv2.imwrite(f"img_smooth.jpeg", img_smooth)
cv2.imwrite(f"img_op.jpeg", img_op)

